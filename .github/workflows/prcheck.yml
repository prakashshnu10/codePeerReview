name: Check PR Merged and Insert Analysis Results

on:
  pull_request:
    types: [closed]

jobs:
  check-pr-merged:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary jq

    - name: Retrieve SonarQube Analysis Results
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
          echo "Retrieving SonarQube analysis results..."
          curl --location 'http://65.1.55.202:9000/api/qualitygates/project_status?projectKey=pr_automate' \
            --header 'Authorization: Basic c3FwXzRjYzY0YjZhMmQ3NjU2MmZmODc2YzA1NWYzYmM2YzZmMTUwNDY5ODk6' \
            -o results.json \
            --stderr curl_error.log
          echo "Curl Error Log:"
          cat curl_error.log
          echo "Results JSON Content:"
          cat results.json

    - name: Check File Type and Parse JSON
      run: |
          file_type=$(file -b --mime-type results.json)
          echo "File type: $file_type"
          if [ "$file_type" == "application/json" ]; then
            STATUS=$(jq -r '.projectStatus.status' results.json)
            echo "Parsed Status: $STATUS"
          else
            echo "Error: The response is not JSON. Check the content of results.json"
            cat results.json
          fi

    - name: Insert analysis results into PostgreSQL
      env:
        PGHOST: ${{ secrets.PGHOST }}
        PGPORT: ${{ secrets.PGPORT }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
      run: |
        echo "Inserting analysis results into PostgreSQL..."
        file_type=$(file -b --mime-type results.json)
        if [ "$file_type" == "application/json" ]; then
          STATUS=$(jq -r '.projectStatus.status' results.json)
          NEW_COVERAGE=$(jq -r '.projectStatus.conditions[] | select(.metricKey == "new_coverage") | .actualValue' results.json)
          MERGE_STATUS=$([[ "${{ github.event.pull_request.merged }}" == "true" ]] && echo "Accepted" || echo "Rejected")
          PR_NUMBER=${{ github.event.pull_request.number }}
          BRANCH=${{ github.head_ref }}
          ANALYSIS_DATA=$(jq -c . results.json | sed "s/'/''/g") # Properly escape single quotes for SQL
          DEVELOPER="Gaurav"

          echo "PR Number: $PR_NUMBER"
          echo "Branch: $BRANCH"
          echo "Status: $STATUS"
          echo "New Coverage: $NEW_COVERAGE"
          echo "Merge Status: $MERGE_STATUS"

          psql -c "INSERT INTO sonar_analysis_results (pr_number, branch, status, coverage_report, analysis_data, developer, security_issue) VALUES ('$PR_NUMBER', '$BRANCH', '$MERGE_STATUS', '$NEW_COVERAGE', '$ANALYSIS_DATA', '$DEVELOPER', 'No');"
        else
          echo "Skipping PostgreSQL insertion due to non-JSON response."
        fi
